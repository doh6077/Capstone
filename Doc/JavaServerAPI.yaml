info:
    title: Java Server
    description: |-
        2025 Sheridan Team 15 Capstone Project
        Smart Waste Monitor System
        Java Server API for processing sensor metadata and reading data
    contact:
        email: hushu@sheridancollege.ca
    version: 1.0.0
# externalDocs:
#     description: Find out more about Swagger
#     url: https://swagger.io
servers:
    - url: https://localhost/api/
tags:
    - name: sensor
      description: For managing sensor metadata and reading data.
    - name: cleaner
      description: manage janitor information
    - name: user
      description: Operations about user
paths:
    /sensors:
        get:
            tags:
                - sensor
            summary: Get all sensors.
            description: Get all sensors.
            operationId: getAllSensors # This I assume is the function name in our Java code
            responses:
                "200":
                    description: successful operation
                    # My guess is that if we are going to use JSON, we can delete "xml" part
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Sensor" # I assume this is Java Bean Class
                        # application/xml:
                        #     schema:
                        #         type: array
                        #         items:
                        #             $ref: "#/components/schemas/Sensor"
                "400":
                    description: Invalid status value
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
            security:
                - sensor_auth:
                      - write:sensors
                      - read:sensors
        post:
            tags:
                - sensor
            summary: Add a new sensor to the database.
            description: Add a new sensor to the database.
            operationId: addSensor
            requestBody:
                description: Create a new sensor in the database
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Sensor"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Sensor"
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: "#/components/schemas/Sensor"
                required: true
            responses:
                "200":
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Sensor"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Sensor"
                "400":
                    description: Invalid input
                "422":
                    description: Validation exception
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
components:
    schemas: # Our Java Class schema goes here:
        Sensor:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    examples: [10]
                bin:
                    type: object
                    $ref: "#/components/schemas/Bin"
                batteryStatus:
                    type: integer
                    format: int32
                    examples: [50]
                lastBatteryUpdateDate:
                    type: string
                    format: date-time
                location:
                    type: string
                    description: Location description (not coordinates. Can try to use accurate coordinates if needed in the future)
            # xml:
            #     name: order
        Cleaner:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    examples: [20]
                username:
                    type: string
                    examples: [fehguy]
                address:
                    type: array
                    xml:
                        name: addresses
                        wrapped: true
                    items:
                        $ref: "#/components/schemas/Address"
            xml:
                name: customer
        Address:
            type: object
            properties:
                street:
                    type: string
                    examples: [437 Lytton]
                city:
                    type: string
                    examples: [Palo Alto]
                state:
                    type: string
                    examples: [CA]
                zip:
                    type: string
                    examples: ["94301"]
            xml:
                name: address
        Category:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    examples: [1]
                name:
                    type: string
                    examples: [Dogs]
            xml:
                name: category
        User:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    examples: [10]
                username:
                    type: string
                    examples: [theUser]
                firstName:
                    type: string
                    examples: [John]
                lastName:
                    type: string
                    examples: [James]
                email:
                    type: string
                    examples: [john@email.com]
                password:
                    type: string
                    examples: ["12345"]
                phone:
                    type: string
                    examples: ["12345"]
                userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    examples: [1]
            xml:
                name: user
        Tag:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
            xml:
                name: tag
        Pet:
            required:
                - name
                - photoUrls
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    examples: [10]
                name:
                    type: string
                    examples: [doggie]
                category:
                    $ref: "#/components/schemas/Category"
                photoUrls:
                    type: array
                    xml:
                        wrapped: true
                    items:
                        type: string
                        xml:
                            name: photoUrl
                tags:
                    type: array
                    xml:
                        wrapped: true
                    items:
                        $ref: "#/components/schemas/Tag"
                status:
                    type: string
                    description: pet status in the store
                    enum:
                        - available
                        - pending
                        - sold
            xml:
                name: pet
        ApiResponse:
            type: object
            properties:
                code:
                    type: integer
                    format: int32
                type:
                    type: string
                message:
                    type: string
            xml:
                name: "##default"
        Error:
            type: object
            properties:
                code:
                    type: string
                message:
                    type: string
            required:
                - code
                - message
    requestBodies: # implement or delete later
        Pet:
            description: Pet object that needs to be added to the store
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Pet"
                application/xml:
                    schema:
                        $ref: "#/components/schemas/Pet"
        UserArray:
            description: List of user object
            content:
                application/json:
                    schema:
                        type: array
                        items:
                            $ref: "#/components/schemas/User"
    securitySchemes: # implement or delete later
        petstore_auth:
            type: oauth2
            flows:
                implicit:
                    authorizationUrl: https://petstore3.swagger.io/oauth/authorize
                    scopes:
                        "write:pets": modify pets in your account
                        "read:pets": read your pets
        api_key:
            type: apiKey
            name: api_key
            in: header
